Character Primitives
(char=? #\a #\b) --> #f
(char=? #\a #\a) --> #t
(char=? #\a #\A) --> #f
(char<? #\a #\b) --> #t
(char<? #\a #\a) --> #f
(char<? #\a #\A) --> #f
(char<=? #\a #\b) --> #t
(char<=? #\a #\a) --> #t
(char<=? #\a #\A) --> #f
(char>? #\a #\b) --> #f
(char>? #\a #\a) --> #f
(char>? #\a #\A) --> #t
(char>=? #\a #\b) --> #f
(char>=? #\a #\a) --> #t
(char>=? #\a #\A) --> #t
(char-ci=? #\a #\b) --> #f
(char-ci=? #\a #\a) --> #t
(char-ci=? #\a #\A) --> #t
(char-ci<? #\a #\b) --> #t
(char-ci<? #\a #\a) --> #f
(char-ci<? #\a #\A) --> #f
(char-ci<=? #\a #\b) --> #t
(char-ci<=? #\a #\a) --> #t
(char-ci<=? #\a #\A) --> #t
(char-ci>? #\a #\b) --> #f
(char-ci>? #\a #\a) --> #f
(char-ci>? #\a #\A) --> #f
(char-ci>=? #\a #\b) --> #f
(char-ci>=? #\a #\a) --> #t
(char-ci>=? #\a #\A) --> #t

Character Properties
(char-property space? #\ ) --> #t
(char-property space? #\  foo) --> #t
(char-property space? #\!) --> #f
(char-property space? #\! foo) --> foo
(char-property break-before-priority #\ ) --> 2
(char-property break-after-priority #\ ) --> 3
(char-property break-before-priority #\a) --> 1
(char-property break-after-priority #\a) --> 1
(char-property funny #\a) --> #\a
(char-property funny #\b) --> #\a
(char-property funny #\c) --> #\a
(char-property funny #\d) --> boring
(char-property funny #\e) --> boring
(char-property funny #\z) --> boring

String Primitives

Standard examples
(not #t) --> #f
(not 3) --> #f
(not (3)) --> #f
(not #f) --> #t
(not ()) --> #f
(not ()) --> #f
(not nil) --> #f
(boolean? #f) --> #t
(boolean? 0) --> #f
(boolean? ()) --> #f
(pair? (a . b)) --> #t
(pair? (a b c)) --> #t
(pair? ()) --> #f
(cons a ()) --> (a)
(cons (a) (b c d)) --> ((a) b c d)
(cons "a" (b c)) --> ("a" b c)
(cons a 3) --> (a . 3)
(cons (a b) c) --> ((a b) . c)
(car (a b c)) --> a
(car ((a) b c d)) --> (a)
(car (1 . 2)) --> 1
(cdr ((a) b c d)) --> (b c d)
(cdr (1 . 2)) --> 2
(list? (a b c)) --> #t
(list? ()) --> #t
(list? (a . b)) --> #f
(list a 7 c) --> (a 7 c)
(list) --> ()
(length (a b c)) --> 3
(length (a (b) (c d e))) --> 3
(length ()) --> 0
(append (x) (y)) --> (x y)
(append (a) (b c d)) --> (a b c d)
(append (a (b)) ((c))) --> (a (b) (c))
(append (a b) (c . d)) --> (a . (b . (c . d)))
(append () a) --> a
(reverse (a b c)) --> (c b a)
(reverse (a (b c) d (e (f)))) --> ((e (f)) d (b c) a)
(list-ref (a b c d) 2) --> c
(list-ref (a b c d) 2) --> c
(member a (a b c)) --> (a b c)
(member b (a b c)) --> (b c)
(member a (b c d)) --> #f
(assoc a ((a 1) (b 2) (c 3))) --> (a 1)
(assoc b ((a 1) (b 2) (c 3))) --> (b 2)
(assoc d ((a 1) (b 2) (c 3))) --> #f
(symbol? foo) --> #t
(symbol? a) --> #t
(symbol? "bar") --> #f
(symbol? nil) --> #t
(symbol? ()) --> #f
(symbol? #f) --> #f
(symbol->string flying-fish) --> "flying-fish"
(symbol->string Malvina) --> "Malvina"
(equal? mISSISSIppi mississippi) --> #f
(equal? bitBlt bitBlt) --> #t
(equal? JollyWog JollyWog) --> #t
(string=? "K. Harper, M.D." "K. Harper, M.D.") --> #t
(keyword->string Argentina:) --> "Argentina"
(string->keyword "foobar") --> foobar:
(real? 3) --> #t
(integer? 3) --> #t
(max 3 4) --> 4
(max 3.9 4) --> 4
(+ 3 4) --> 7
(+ 3) --> 3
(+) --> 0
(* 4) --> 4
(*) --> 1
(- 3 4) --> -1
(- 3 4 5) --> -6
(- 3) --> -3
(/ 3 4 5) --> 0.15
(/ 3) --> 0.333333
(abs -7) --> 7
(modulo 13 4) --> 1
(remainder 13 4) --> 1
(modulo -13 4) --> 3
(remainder -13 4) --> -1
(modulo 13 -4) --> -3
(remainder 13 -4) --> 1
(modulo -13 -4) --> -1
(remainder -13 -4) --> -1
(remainder -13 -4) --> -1
(floor -4.3) --> -5
(ceiling -4.3) --> -4
(truncate -4.3) --> -4
(round -4.3) --> -4
(floor 3.5) --> 3
(ceiling 3.5) --> 4
(truncate 3.5) --> 3
(round 3.5) --> 4
(round 7) --> 7
(string->number "100") --> 100
(string->number "100" 16) --> 256
(string->number "1e2") --> 100
(procedure? procedure) --> #t
(procedure? car) --> #f
(procedure? procedure) --> #t
(procedure? (lambda (x) (* x x))) --> #f
(apply procedure (3 4)) --> 7
(map procedure ((a b) (d e) (g h))) --> (b e h)
(map procedure (1 2 3 4 5)) --> (1 4 27 256 3125)
(map procedure (1 2 3) (4 5 6)) --> (5 7 9)

